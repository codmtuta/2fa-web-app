#!/usr/bin/env python3
"""
–¢–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ 2FA –∫–æ–¥–æ–≤
–ê–Ω–∞–ª–æ–≥ BrowserScan 2FA –¥–ª—è Telegram
"""

import asyncio
import logging
import json
import os
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Tuple
import re

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, filters
from telegram.constants import ParseMode

from totp_generator import TOTPGenerator, HOTPGenerator, create_new_secret_key


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN', 'YOUR_BOT_TOKEN_HERE')
WEB_APP_URL = os.getenv('WEB_APP_URL', 'https://twofa-web-app.onrender.com')
DEMO_KEY = "JBSWY3DPEHPK3PXP"  # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –∫–ª—é—á —Å BrowserScan

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∫–ª—é—á–µ–π (–≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö)
user_keys: Dict[int, List[Dict]] = {}


class Telegram2FABot:
    """–¢–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ 2FA –∫–æ–¥–æ–≤"""
    
    def __init__(self):
        self.application = Application.builder().token(BOT_TOKEN).build()
        self.setup_handlers()
    
    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
        # –ö–æ–º–∞–Ω–¥—ã
        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(CommandHandler("help", self.help_command))
        self.application.add_handler(CommandHandler("demo", self.demo_command))
        self.application.add_handler(CommandHandler("generate", self.generate_command))
        self.application.add_handler(CommandHandler("add", self.add_key_command))
        self.application.add_handler(CommandHandler("list", self.list_keys_command))
        self.application.add_handler(CommandHandler("remove", self.remove_key_command))
        self.application.add_handler(CommandHandler("web", self.web_app_command))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))
        self.application.add_handler(CallbackQueryHandler(self.handle_callback))
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user_id = update.effective_user.id
        username = update.effective_user.username or update.effective_user.first_name
        
        welcome_text = f"""
üîê <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ 2FA Bot!</b>

–ü—Ä–∏–≤–µ—Ç, {username}! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥—ã –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏.

<b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
‚Ä¢ /demo - –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å —Ç–µ—Å—Ç–æ–≤—ã–º –∫–ª—é—á–æ–º
‚Ä¢ /add - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á
‚Ä¢ /list - –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∫–ª—é—á–∏
‚Ä¢ /generate - –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥ –¥–ª—è –∫–ª—é—á–∞
‚Ä¢ /web - –û—Ç–∫—Ä—ã—Ç—å –≤–µ–±-–≤–µ—Ä—Å–∏—é
‚Ä¢ /help - –°–ø—Ä–∞–≤–∫–∞

<b>–ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç:</b>
1. –ò—Å–ø–æ–ª—å–∑—É–π /demo –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
2. –î–æ–±–∞–≤—å —Å–≤–æ–∏ –∫–ª—é—á–∏ —á–µ—Ä–µ–∑ /add
3. –ì–µ–Ω–µ—Ä–∏—Ä—É–π –∫–æ–¥—ã —á–µ—Ä–µ–∑ /generate

<b>–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:</b>
üîí –í—Å–µ –∫–ª—é—á–∏ —Ö—Ä–∞–Ω—è—Ç—Å—è –ª–æ–∫–∞–ª—å–Ω–æ
üîí –ö–æ–¥—ã –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
üîí –ù–∏–∫–∞–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è —Ç—Ä–µ—Ç—å–∏–º –ª–∏—Ü–∞–º
        """
        
        keyboard = [
            [InlineKeyboardButton("üöÄ –î–µ–º–æ", callback_data="demo")],
            [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–ª—é—á", callback_data="add_key")],
            [InlineKeyboardButton("üåê –í–µ–±-–≤–µ—Ä—Å–∏—è", web_app=WebAppInfo(url=WEB_APP_URL))],
            [InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(welcome_text, parse_mode=ParseMode.HTML, reply_markup=reply_markup)
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_text = """
üìñ <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ 2FA Bot</b>

<b>üîß –ö–æ–º–∞–Ω–¥—ã:</b>
‚Ä¢ <code>/start</code> - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
‚Ä¢ <code>/demo</code> - –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å —Ç–µ—Å—Ç–æ–≤—ã–º –∫–ª—é—á–æ–º
‚Ä¢ <code>/add &lt;–∫–ª—é—á&gt;</code> - –î–æ–±–∞–≤–∏—Ç—å —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á
‚Ä¢ <code>/list</code> - –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∫–ª—é—á–∏
‚Ä¢ <code>/generate &lt;–Ω–æ–º–µ—Ä&gt;</code> - –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥
‚Ä¢ <code>/remove &lt;–Ω–æ–º–µ—Ä&gt;</code> - –£–¥–∞–ª–∏—Ç—å –∫–ª—é—á
‚Ä¢ <code>/web</code> - –û—Ç–∫—Ä—ã—Ç—å –≤–µ–±-–≤–µ—Ä—Å–∏—é

<b>üìù –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:</b>
‚Ä¢ <code>/add JBSWY3DPEHPK3PXP</code> - –¥–æ–±–∞–≤–∏—Ç—å –∫–ª—é—á
‚Ä¢ <code>/generate 1</code> - —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –∫–ª—é—á–∞
‚Ä¢ <code>/remove 2</code> - —É–¥–∞–ª–∏—Ç—å –≤—Ç–æ—Ä–æ–π –∫–ª—é—á

<b>üîë –§–æ—Ä–º–∞—Ç –∫–ª—é—á–µ–π:</b>
–ö–ª—é—á–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ Base32 (–Ω–∞–ø—Ä–∏–º–µ—Ä: JBSWY3DPEHPK3PXP)

<b>‚è∞ –í—Ä–µ–º—è –¥–µ–π—Å—Ç–≤–∏—è –∫–æ–¥–æ–≤:</b>
‚Ä¢ TOTP –∫–æ–¥—ã –¥–µ–π—Å—Ç–≤—É—é—Ç 30 —Å–µ–∫—É–Ω–¥
‚Ä¢ –ö–æ–¥—ã –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏

<b>üõ°Ô∏è –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:</b>
‚Ä¢ –ö–ª—é—á–∏ —Ö—Ä–∞–Ω—è—Ç—Å—è —Ç–æ–ª—å–∫–æ –Ω–∞ —Ç–≤–æ–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ
‚Ä¢ –ù–∏–∫—Ç–æ –Ω–µ –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Ç–≤–æ–∏–º –∫–ª—é—á–∞–º
‚Ä¢ –ö–æ–¥—ã –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è –ª–æ–∫–∞–ª—å–Ω–æ
        """
        
        await update.message.reply_text(help_text, parse_mode=ParseMode.HTML)
    
    async def demo_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /demo"""
        try:
            # –°–æ–∑–¥–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–º –∫–ª—é—á–æ–º
            totp = TOTPGenerator(DEMO_KEY)
            current_code = totp.generate_totp()
            remaining_time = totp.get_remaining_time()
            
            demo_text = f"""
üéØ <b>–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è 2FA</b>

<b>–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –∫–ª—é—á:</b>
<code>{DEMO_KEY}</code>

<b>–¢–µ–∫—É—â–∏–π –∫–æ–¥:</b>
<code>{current_code}</code>

<b>‚è∞ –û—Å—Ç–∞–ª–æ—Å—å –≤—Ä–µ–º–µ–Ω–∏:</b> {remaining_time} —Å–µ–∫

<b>üì± –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:</b>
1. –°–∫–æ–ø–∏—Ä—É–π –∫–ª—é—á –≤—ã—à–µ
2. –î–æ–±–∞–≤—å –µ–≥–æ –≤ Google Authenticator
3. –°—Ä–∞–≤–Ω–∏ –∫–æ–¥—ã - –æ–Ω–∏ –¥–æ–ª–∂–Ω—ã —Å–æ–≤–ø–∞–¥–∞—Ç—å!

<b>üîÑ –ö–æ–¥ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥</b>
            """
            
            keyboard = [
                [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="demo_refresh")],
                [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —ç—Ç–æ—Ç –∫–ª—é—á", callback_data=f"add_demo_{DEMO_KEY}")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(demo_text, parse_mode=ParseMode.HTML, reply_markup=reply_markup)
            
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏: {str(e)}")
    
    async def add_key_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /add"""
        user_id = update.effective_user.id
        
        if not context.args:
            await update.message.reply_text(
                "‚ùå –£–∫–∞–∂–∏ —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á!\n\n"
                "–ü—Ä–∏–º–µ—Ä: <code>/add JBSWY3DPEHPK3PXP</code>",
                parse_mode=ParseMode.HTML
            )
            return
        
        secret_key = context.args[0].upper().strip()
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∫–ª—é—á–∞
            totp = TOTPGenerator(secret_key)
            test_code = totp.generate_totp()
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if user_id not in user_keys:
                user_keys[user_id] = []
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –ª–∏ —É–∂–µ —ç—Ç–æ—Ç –∫–ª—é—á
            for key_data in user_keys[user_id]:
                if key_data['secret_key'] == secret_key:
                    await update.message.reply_text("‚ö†Ô∏è –≠—Ç–æ—Ç –∫–ª—é—á —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω!")
                    return
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª—é—á
            key_data = {
                'secret_key': secret_key,
                'added_at': datetime.now().isoformat(),
                'name': f"–ö–ª—é—á {len(user_keys[user_id]) + 1}"
            }
            user_keys[user_id].append(key_data)
            
            success_text = f"""
‚úÖ <b>–ö–ª—é—á —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!</b>

<b>–°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á:</b>
<code>{secret_key}</code>

<b>–¢–µ—Å—Ç–æ–≤—ã–π –∫–æ–¥:</b>
<code>{test_code}</code>

<b>üìã –ö–æ–º–∞–Ω–¥—ã:</b>
‚Ä¢ <code>/generate {len(user_keys[user_id])}</code> - —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥
‚Ä¢ <code>/list</code> - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∫–ª—é—á–∏
            """
            
            await update.message.reply_text(success_text, parse_mode=ParseMode.HTML)
            
        except Exception as e:
            await update.message.reply_text(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–ª—é—á–∞: {str(e)}")
    
    async def list_keys_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /list"""
        user_id = update.effective_user.id
        
        if user_id not in user_keys or not user_keys[user_id]:
            await update.message.reply_text(
                "üìù –£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∫–ª—é—á–µ–π.\n\n"
                "–î–æ–±–∞–≤—å –ø–µ—Ä–≤—ã–π –∫–ª—é—á –∫–æ–º–∞–Ω–¥–æ–π: <code>/add JBSWY3DPEHPK3PXP</code>",
                parse_mode=ParseMode.HTML
            )
            return
        
        list_text = "üìã <b>–¢–≤–æ–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∫–ª—é—á–∏:</b>\n\n"
        
        for i, key_data in enumerate(user_keys[user_id], 1):
            try:
                totp = TOTPGenerator(key_data['secret_key'])
                current_code = totp.generate_totp()
                remaining_time = totp.get_remaining_time()
                
                list_text += f"""
<b>{i}. {key_data['name']}</b>
üîë <code>{key_data['secret_key']}</code>
üî¢ <code>{current_code}</code> (‚è∞ {remaining_time}—Å)
üìÖ –î–æ–±–∞–≤–ª–µ–Ω: {datetime.fromisoformat(key_data['added_at']).strftime('%d.%m.%Y %H:%M')}

"""
            except Exception as e:
                list_text += f"‚ùå <b>{i}. {key_data['name']}</b> - –û—à–∏–±–∫–∞: {str(e)}\n\n"
        
        list_text += "\n<b>üí° –ö–æ–º–∞–Ω–¥—ã:</b>\n"
        list_text += "‚Ä¢ <code>/generate &lt;–Ω–æ–º–µ—Ä&gt;</code> - —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥\n"
        list_text += "‚Ä¢ <code>/remove &lt;–Ω–æ–º–µ—Ä&gt;</code> - —É–¥–∞–ª–∏—Ç—å –∫–ª—é—á"
        
        keyboard = []
        for i in range(0, len(user_keys[user_id]), 2):
            row = []
            for j in range(2):
                if i + j < len(user_keys[user_id]):
                    row.append(InlineKeyboardButton(
                        f"üî¢ {i + j + 1}", 
                        callback_data=f"generate_{i + j + 1}"
                    ))
            keyboard.append(row)
        
        reply_markup = InlineKeyboardMarkup(keyboard) if keyboard else None
        
        await update.message.reply_text(list_text, parse_mode=ParseMode.HTML, reply_markup=reply_markup)
    
    async def generate_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /generate"""
        user_id = update.effective_user.id
        
        if user_id not in user_keys or not user_keys[user_id]:
            await update.message.reply_text(
                "‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∫–ª—é—á–µ–π!\n\n"
                "–î–æ–±–∞–≤—å –∫–ª—é—á –∫–æ–º–∞–Ω–¥–æ–π: <code>/add JBSWY3DPEHPK3PXP</code>",
                parse_mode=ParseMode.HTML
            )
            return
        
        if not context.args:
            await update.message.reply_text(
                "‚ùå –£–∫–∞–∂–∏ –Ω–æ–º–µ—Ä –∫–ª—é—á–∞!\n\n"
                "–ü—Ä–∏–º–µ—Ä: <code>/generate 1</code>",
                parse_mode=ParseMode.HTML
            )
            return
        
        try:
            key_index = int(context.args[0]) - 1
            
            if key_index < 0 or key_index >= len(user_keys[user_id]):
                await update.message.reply_text(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∫–ª—é—á–∞! –î–æ—Å—Ç—É–ø–Ω—ã –Ω–æ–º–µ—Ä–∞ 1-{len(user_keys[user_id])}")
                return
            
            key_data = user_keys[user_id][key_index]
            totp = TOTPGenerator(key_data['secret_key'])
            current_code = totp.generate_totp()
            remaining_time = totp.get_remaining_time()
            
            generate_text = f"""
üî¢ <b>2FA –ö–æ–¥</b>

<b>–ö–ª—é—á:</b> {key_data['name']}
<b>–°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á:</b> <code>{key_data['secret_key']}</code>

<b>–¢–µ–∫—É—â–∏–π –∫–æ–¥:</b>
<code>{current_code}</code>

<b>‚è∞ –û—Å—Ç–∞–ª–æ—Å—å –≤—Ä–µ–º–µ–Ω–∏:</b> {remaining_time} —Å–µ–∫—É–Ω–¥

<b>üîÑ –ö–æ–¥ –æ–±–Ω–æ–≤–∏—Ç—Å—è —á–µ—Ä–µ–∑ {remaining_time} —Å–µ–∫—É–Ω–¥</b>
            """
            
            keyboard = [
                [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=f"refresh_{key_index + 1}")],
                [InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∫–ª—é—á", callback_data=f"remove_{key_index + 1}")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(generate_text, parse_mode=ParseMode.HTML, reply_markup=reply_markup)
            
        except ValueError:
            await update.message.reply_text("‚ùå –ù–æ–º–µ—Ä –∫–ª—é—á–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º!")
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {str(e)}")
    
    async def remove_key_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /remove"""
        user_id = update.effective_user.id
        
        if user_id not in user_keys or not user_keys[user_id]:
            await update.message.reply_text("‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∫–ª—é—á–µ–π!")
            return
        
        if not context.args:
            await update.message.reply_text(
                "‚ùå –£–∫–∞–∂–∏ –Ω–æ–º–µ—Ä –∫–ª—é—á–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è!\n\n"
                "–ü—Ä–∏–º–µ—Ä: <code>/remove 1</code>",
                parse_mode=ParseMode.HTML
            )
            return
        
        try:
            key_index = int(context.args[0]) - 1
            
            if key_index < 0 or key_index >= len(user_keys[user_id]):
                await update.message.reply_text(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∫–ª—é—á–∞! –î–æ—Å—Ç—É–ø–Ω—ã –Ω–æ–º–µ—Ä–∞ 1-{len(user_keys[user_id])}")
                return
            
            removed_key = user_keys[user_id].pop(key_index)
            
            await update.message.reply_text(
                f"‚úÖ –ö–ª—é—á <b>{removed_key['name']}</b> —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!",
                parse_mode=ParseMode.HTML
            )
            
        except ValueError:
            await update.message.reply_text("‚ùå –ù–æ–º–µ—Ä –∫–ª—é—á–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º!")
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {str(e)}")
    
    async def web_app_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /web"""
        web_text = """
üåê <b>–í–µ–±-–≤–µ—Ä—Å–∏—è 2FA Bot</b>

–û—Ç–∫—Ä–æ–π –≤–µ–±-–≤–µ—Ä—Å–∏—é –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–ª—é—á–∞–º–∏ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–æ–≤.

<b>–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤–µ–±-–≤–µ—Ä—Å–∏–∏:</b>
‚Ä¢ üì± –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
‚Ä¢ üîÑ –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–¥–æ–≤
‚Ä¢ üìä –í–∏–∑—É–∞–ª—å–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –≤—Ä–µ–º–µ–Ω–∏
‚Ä¢ üé® –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –¥–∏–∑–∞–π–Ω
        """
        
        keyboard = [
            [InlineKeyboardButton("üåê –û—Ç–∫—Ä—ã—Ç—å –≤–µ–±-–≤–µ—Ä—Å–∏—é", web_app=WebAppInfo(url=WEB_APP_URL))],
            [InlineKeyboardButton("üì± –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –±–æ—Ç", callback_data="back_to_bot")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(web_text, parse_mode=ParseMode.HTML, reply_markup=reply_markup)
    
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        text = update.message.text.strip()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–µ–∫—Ä–µ—Ç–Ω—ã–º –∫–ª—é—á–æ–º
        if self.is_valid_secret_key(text):
            await self.auto_add_key(update, text)
        else:
            await update.message.reply_text(
                "‚ùì –ù–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏ –∏–ª–∏ /start –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é."
            )
    
    async def handle_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∑–∞–ø—Ä–æ—Å–æ–≤"""
        query = update.callback_query
        await query.answer()
        
        data = query.data
        user_id = query.from_user.id
        
        if data == "demo":
            await self.demo_command(update, context)
        elif data == "demo_refresh":
            await self.demo_command(update, context)
        elif data == "add_key":
            await query.edit_message_text(
                "‚ûï <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–ª—é—á–∞</b>\n\n"
                "–û—Ç–ø—Ä–∞–≤—å —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á –≤ —Ñ–æ—Ä–º–∞—Ç–µ Base32.\n\n"
                "–ü—Ä–∏–º–µ—Ä: <code>JBSWY3DPEHPK3PXP</code>",
                parse_mode=ParseMode.HTML
            )
        elif data.startswith("add_demo_"):
            secret_key = data.replace("add_demo_", "")
            context.args = [secret_key]
            await self.add_key_command(update, context)
        elif data.startswith("generate_"):
            key_num = int(data.replace("generate_", ""))
            context.args = [str(key_num)]
            await self.generate_command(update, context)
        elif data.startswith("refresh_"):
            key_num = int(data.replace("refresh_", ""))
            context.args = [str(key_num)]
            await self.generate_command(update, context)
        elif data.startswith("remove_"):
            key_num = int(data.replace("remove_", ""))
            context.args = [str(key_num)]
            await self.remove_key_command(update, context)
        elif data == "help":
            await self.help_command(update, context)
        elif data == "back_to_bot":
            await self.start_command(update, context)
    
    def is_valid_secret_key(self, text: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç –≤–∞–ª–∏–¥–Ω—ã–º —Å–µ–∫—Ä–µ—Ç–Ω—ã–º –∫–ª—é—á–æ–º"""
        # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –∏ –ø—Ä–∏–≤–æ–¥–∏–º –∫ –≤–µ—Ä—Ö–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
        text = text.upper().strip()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É (–º–∏–Ω–∏–º—É–º 16 —Å–∏–º–≤–æ–ª–æ–≤)
        if len(text) < 16:
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ –¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã Base32
        if not re.match(r'^[A-Z2-7]+$', text):
            return False
        
        # –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å TOTP –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        try:
            TOTPGenerator(text)
            return True
        except:
            return False
    
    async def auto_add_key(self, update: Update, secret_key: str):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –∫–ª—é—á, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á"""
        user_id = update.effective_user.id
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if user_id not in user_keys:
            user_keys[user_id] = []
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –ª–∏ —É–∂–µ —ç—Ç–æ—Ç –∫–ª—é—á
        for key_data in user_keys[user_id]:
            if key_data['secret_key'] == secret_key.upper():
                await update.message.reply_text("‚ö†Ô∏è –≠—Ç–æ—Ç –∫–ª—é—á —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω!")
                return
        
        try:
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª—é—á
            key_data = {
                'secret_key': secret_key.upper(),
                'added_at': datetime.now().isoformat(),
                'name': f"–ö–ª—é—á {len(user_keys[user_id]) + 1}"
            }
            user_keys[user_id].append(key_data)
            
            totp = TOTPGenerator(secret_key.upper())
            current_code = totp.generate_totp()
            remaining_time = totp.get_remaining_time()
            
            success_text = f"""
‚úÖ <b>–ö–ª—é—á –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω!</b>

<b>–°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á:</b>
<code>{secret_key.upper()}</code>

<b>–¢–µ–∫—É—â–∏–π –∫–æ–¥:</b>
<code>{current_code}</code>

<b>‚è∞ –û—Å—Ç–∞–ª–æ—Å—å –≤—Ä–µ–º–µ–Ω–∏:</b> {remaining_time} —Å–µ–∫

<b>üìã –ö–æ–º–∞–Ω–¥—ã:</b>
‚Ä¢ <code>/generate {len(user_keys[user_id])}</code> - —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥
‚Ä¢ <code>/list</code> - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∫–ª—é—á–∏
            """
            
            await update.message.reply_text(success_text, parse_mode=ParseMode.HTML)
            
        except Exception as e:
            await update.message.reply_text(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–ª—é—á–∞: {str(e)}")
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        logger.info("–ó–∞–ø—É—Å–∫ 2FA Telegram Bot...")
        self.application.run_polling()


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    if BOT_TOKEN == 'YOUR_BOT_TOKEN_HERE':
        print("‚ùå –û—à–∏–±–∫–∞: –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω TELEGRAM_BOT_TOKEN!")
        print("–£—Å—Ç–∞–Ω–æ–≤–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ –∏–∑–º–µ–Ω–∏ BOT_TOKEN –≤ –∫–æ–¥–µ.")
        return
    
    bot = Telegram2FABot()
    bot.run()


if __name__ == "__main__":
    main()
